---
import { Image } from '@astrojs/image/components';
---

<header class="relative h-screen w-full overflow-hidden bg-black text-white">
  <!-- Animated Background (Hero-only) -->
  <div id="matrix-bg" class="absolute inset-0 opacity-30"></div>

  <!-- Foreground Content -->
  <div class="relative z-10 flex h-full flex-col items-center justify-center px-6 text-center">
    <h1 class="animate-fade-in mb-4 text-4xl font-bold tracking-wide text-green-400 sm:text-6xl">
      Hi, Iâ€™m Juan Almeida
    </h1>
    <p class="animate-slide-up mb-8 text-lg text-gray-300 sm:text-2xl">
      Full Stack Engineer | Building modern, accessible web experiences
    </p>

    <div class="flex flex-wrap justify-center gap-4">
      <a
        href="#projects"
        class="rounded-lg bg-green-500 px-6 py-3 font-semibold text-black transition hover:bg-green-400"
      >
        View Projects
      </a>
      <a
        href="#contact"
        class="rounded-lg border border-green-400 px-6 py-3 text-green-400 transition hover:bg-green-400 hover:text-black"
      >
        Contact Me
      </a>
    </div>
  </div>

  <style>
    @keyframes fade-in {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    @keyframes slide-up {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    .animate-fade-in {
      animation: fade-in 1.2s ease-out forwards;
    }
    .animate-slide-up {
      animation: slide-up 1.5s ease-out forwards;
    }
  </style>

  <script is:inline>
    function initMatrixEffect() {
      function draw(ctx, drops, columns, width, height, charArray) {
        ctx.fillStyle = 'rgba(0, 0, 0, 0.04)';
        ctx.fillRect(0, 0, width, height);
        ctx.fillStyle = '#0F0';
        ctx.font = '15px monospace';
        for (let i = 0; i < drops.length; i++) {
          const text = charArray[Math.floor(Math.random() * charArray.length)];
          ctx.fillText(text, i * 20, drops[i] * 20);
          if (drops[i] * 20 > height && Math.random() > 0.975) drops[i] = 0;
          drops[i]++;
        }
      }
      const matrixContainer = document.getElementById('matrix-bg');
      if (matrixContainer) {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        if (!ctx) return;
        matrixContainer.appendChild(canvas);
        let width = (canvas.width = window.innerWidth);
        let height = (canvas.height = window.innerHeight);
        let columns = Math.floor(width / 20);
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%^&*()';
        const charArray = characters.split('');
        let drops = [];
        for (let i = 0; i < columns; i++) drops[i] = 1;

        const interval = setInterval(() => {
          draw(ctx, drops, columns, width, height, charArray);
        }, 33);

        const resizeHandler = () => {
          width = canvas.width = window.innerWidth;
          height = canvas.height = window.innerHeight;
          columns = Math.floor(width / 20);
          drops = [];
          for (let i = 0; i < columns; i++) drops[i] = 1;
        };

        window.addEventListener('resize', resizeHandler);
        window.addEventListener('pagehide', () => {
          clearInterval(interval);
          window.removeEventListener('resize', resizeHandler);
        });
      }
    }
    initMatrixEffect();
  </script>
</header>
