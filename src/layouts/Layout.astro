---
import { ViewTransitions } from 'astro:transitions';
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';

export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="Juan Almeida â€“ Full Stack Engineer crafting modern, accessible frontends with Astro, React, and TypeScript."
    />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0"
    />
    <link rel="stylesheet" href="/node_modules/@fortawesome/fontawesome-free/css/all.min.css" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta property="og:title" content="Juan Almeida | Software Engineer" />
    <meta property="og:image" content="/og-image.jpg" />
    <ViewTransitions />
  </head>
  <body class="bg-black text-white">
    <Navbar />
    <main><slot /></main>
    <Footer />

    <script is:inline>
      const sections = document.querySelectorAll('section[id]');
      const navLinks = document.querySelectorAll("nav a[href^='#']");

      let scrollTimeout;

      // Ensure Hero section visible by default
      if (sections.length > 0) {
        sections[0].classList.add('active-section');
        navLinks[0]?.classList.add('text-green-400');
      }

      // Intersection Observer: controls fade + nav highlight
      const observer = new IntersectionObserver(
        entries => {
          entries.forEach(entry => {
            const target = entry.target;
            if (entry.isIntersecting) {
              target.classList.add('active-section');
              navLinks.forEach(link => {
                const isActive = link.getAttribute('href').replace('#', '') === target.id;
                link.classList.toggle('text-green-400', isActive);
              });
              history.replaceState(null, '', `#${target.id}`);
            } else {
              const rect = entry.boundingClientRect;
              if (rect.bottom < 0 || rect.top > window.innerHeight) {
                target.classList.remove('active-section');
              }
            }
          });
        },
        { threshold: 0.3, rootMargin: '-20% 0px -20% 0px' }
      );

      sections.forEach(section => observer.observe(section));

      // Smooth scroll for navbar links
      navLinks.forEach(link => {
        link.addEventListener('click', e => {
          e.preventDefault();
          const targetId = link.getAttribute('href');
          const target = document.querySelector(targetId);
          if (target) target.scrollIntoView({ behavior: 'smooth' });
        });
      });

      // Smart snap scrolling after user stops scrolling
      window.addEventListener('scroll', () => {
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
          let closest = null;
          let closestDistance = Infinity;
          const viewportCenter = window.innerHeight / 2;

          sections.forEach(section => {
            const rect = section.getBoundingClientRect();
            const sectionCenter = rect.top + rect.height / 2;
            const distance = Math.abs(sectionCenter - viewportCenter);
            if (distance < closestDistance) {
              closest = section;
              closestDistance = distance;
            }
          });

          if (closest) {
            closest.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
        }, 150); // delay in ms after user stops scrolling
      });
    </script>
  </body><style is:global>
    html {
      scroll-behavior: smooth;
    }
    body {
      overflow-y: scroll;
      height: 100vh;
    }
    section {
      scroll-snap-align: start;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: center;
      opacity: 0;
      pointer-events: none;
      transform: scale(0.98);
      transition:
        opacity 0.8s ease,
        transform 0.6s ease;
    }
    section.active-section {
      opacity: 1;
      pointer-events: auto;
      transform: scale(1);
    }
  </style>
</html>
