---
import { ViewTransitions } from 'astro:transitions';
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';

export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="Juan Almeida â€“ Full Stack Engineer crafting modern, accessible frontends with Astro, React, and TypeScript."
    />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0"
    />
    <link rel="stylesheet" href="/node_modules/@fortawesome/fontawesome-free/css/all.min.css" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta property="og:title" content="Juan Almeida | Software Engineer" />
    <meta property="og:image" content="/og-image.jpg" />
    <ViewTransitions />
  </head>
  <body class="bg-black text-white">
    <Navbar />
    <main><slot /></main>
    <Footer />

    <script is:inline>
      const sections = document.querySelectorAll('section[id]');
      const navLinks = document.querySelectorAll("nav a[href^='#']");

      // Hero visible by default
      if (sections.length > 0) {
        sections[0].classList.add('active-section');
        navLinks[0]?.classList.add('text-green-400');
      }

      const observer = new IntersectionObserver(
        entries => {
          entries.forEach(entry => {
            const target = entry.target;

            if (entry.isIntersecting) {
              // Activate section
              target.classList.add('active-section');

              // Auto-navigate: update active navbar link
              navLinks.forEach(link => {
                const sectionId = link.getAttribute('href').replace('#', '');
                const isActive = sectionId === target.id;
                link.classList.toggle('text-green-400', isActive);
              });

              // Smoothly scroll to align with top (auto navigation effect)
              history.replaceState(null, '', `#${target.id}`);
            } else {
              // Hide section when out of view
              const rect = entry.boundingClientRect;
              const fullyAbove = rect.bottom < 0;
              const fullyBelow = rect.top > window.innerHeight;
              if (fullyAbove || fullyBelow) {
                target.classList.remove('active-section');
              }
            }
          });
        },
        {
          threshold: 0.25, // Section must be at least 25% visible
          rootMargin: '-20% 0px -20% 0px', // Better trigger for auto nav
        }
      );

      sections.forEach(section => observer.observe(section));

      // Enable smooth scroll for manual clicks
      navLinks.forEach(link => {
        link.addEventListener('click', e => {
          e.preventDefault();
          const href = link.getAttribute('href');
          const section = document.querySelector(href);
          if (section) {
            window.scrollTo({
              top: section.offsetTop,
              behavior: 'smooth',
            });
          }
        });
      });
    </script>
  </body><style is:global>
    html {
      scroll-behavior: smooth;
    }

    body {
      scroll-snap-type: y mandatory;
      overflow-y: scroll;
      height: 100vh;
      margin: 0;
      width: 100%;
      min-height: 100%;
    }

    @media (min-width: 768px) {
      body {
        scroll-snap-type: y mandatory;
      }
    }

    section {
      opacity: 0;
      pointer-events: none;
      transform: scale(0.98);
      transition:
        opacity 0.8s ease,
        transform 0.6s ease;
      scroll-snap-align: start;
      scroll-snap-stop: always;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: center;
      margin: 0;
      padding: 4rem 0;
      scroll-margin-top: 5rem; /* adjust if your navbar is taller */
    }

    section.active-section {
      opacity: 1;
      pointer-events: auto;
      transform: scale(1);
    }
  </style>
</html>
